@using GenesisBlogTakeTwo.Services.Interfaces
@using GenesisBlogTakeTwo.Utilities
@model GenesisBlogTakeTwo.Models.BlogPost

@inject IImageService ImageService
@inject SlugService SlugService

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>BlogPost</h4>
<hr />
<div class="row">
    <div class="col-md-12">
        <form id="quillForm" asp-action="Create" enctype="multipart/form-data">

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            <div class="col-md-4 form-group mb-3">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>

            <div class="col-md-4 form-group mb-3">
                <label asp-for="Abstract" class="control-label"></label>
                <textarea asp-for="Abstract" class="form-control" rows=4></textarea>
                <span asp-validation-for="Abstract" class="text-danger"></span>
            </div>

            <div class="col-md-8 form-group mb-3">
                <label asp-for="Content" class="control-label"></label>
                @*this will change to type="hidden" in the final code*@
                @*<input type="text" asp-for="Content" />*@
                <textarea asp-for="Content" class="form-control" rows=4 required></textarea>
                <span asp-validation-for="Content" class="text-danger"></span>


                @*<div id="quillEditor">
                        @if (Model != null)
                        {
                            @Html.Raw(Model.Content)
                        }
                </div>*@
            </div>

            <div class="col-md-4 form-group mb-3">
                <label asp-for="BlogPostState" class="control-label"></label>
                <select asp-for="BlogPostState" asp-items="ViewBag.BlogPostStatesList" class="form-control"></select>
                <span asp-validation-for="BlogPostState" class="text-danger"></span>
            </div>

            <div class="col-md-4 form-group mb-3">
                <label asp-for="ImageFile" class="control-label"></label>
                <input asp-for="ImageFile" class="form-control" accept=".png,.jpg,.jpeg,.gif"
                       onchange="document.getElementById('defaultImage').src = window.URL.createObjectURL(this.files[0])" />
                <span asp-validation-for="ImageFile" class="text-danger"></span>
            </div>

            <div class="col-md-4 form-group mb-3">
                @if (TempData.ContainsKey("ImageFile") && TempData["ImageFile"] is not null)
                {
                    <img id="defaultImage" class="img-fluid img-thumbnail mt-2" style="width:120px;height:120px" src="@ImageService.ConvertByteArrayToFile((byte[]) TempData["ImageData"], TempData["ImageType"].ToString())">
                }
                else
                {
                    <img id="defaultImage" class="img-fluid img-thumbnail mt-2" style="width:120px;height:120px" src="https://cdn.icon-icons.com/icons2/233/PNG/512/Contacts_26253.png">
                }

            </div>

            <div class="col-md-4 form-group mb-3">
                <label asp-for="Tags" class="control-label"></label>
                <select name="TagIds" class="form-control" asp-items="ViewBag.TagIds" multiple></select>
                <span asp-validation-for="Tags" class="text-danger"></span>
            </div>

            <div class="col-md-4 form-group mb-3">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.getElementById("quillForm").addEventListener("submit", function() {
            document.getElementById("Content").value = quill.container.firstChild.innerHTML;
        })
    </script>

    <script>
    tinymce.init({
      selector: 'textarea',
        setup: function(editor) {
            editor.on('change', function() {
                tinymce.triggerSave();
            });
        }
    });
  </script>
}
@*
<!DOCTYPE html>
<html>
<head>
  <script src="https://cdn.tiny.cloud/1/t96sqqc8ah7p2fjpfopckjta8egmar3sx8pims7ir2usn41i/tinymce/6/tinymce.min.js" referrerpolicy="origin"></script>
</head>
<body>
  <textarea>
    Welcome to TinyMCE!
  </textarea>
  <script>
    tinymce.init({
      selector: 'textarea',
      plugins: 'a11ychecker advcode casechange export formatpainter image editimage linkchecker autolink lists checklist media mediaembed pageembed permanentpen powerpaste table advtable tableofcontents tinycomments tinymcespellchecker',
      toolbar: 'a11ycheck addcomment showcomments casechange checklist code export formatpainter image editimage pageembed permanentpen table tableofcontents',
      toolbar_mode: 'floating',
      tinycomments_mode: 'embedded',
      tinycomments_author: 'Author name',
    });
  </script>
</body>
</html>*@
